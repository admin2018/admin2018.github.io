{"version":3,"sources":["webpack:///./src/app/auth/auth.component.html","webpack:///./src/app/auth/login/login.component.html","webpack:///./src/app/auth/logout/logout.component.html","webpack:///./src/app/auth/register/register.component.html","webpack:///./src/app/auth/request-password/request-password.component.html","webpack:///./src/app/auth/reset-passwordrd/reset-passwordrd.component.html","webpack:///./src/app/auth/auth-routing.module.ts","webpack:///./src/app/auth/auth.component.scss","webpack:///./src/app/auth/auth.component.ts","webpack:///./src/app/auth/auth.module.ts","webpack:///./src/app/auth/login/login.component.scss","webpack:///./src/app/auth/login/login.component.ts","webpack:///./src/app/auth/logout/logout.component.scss","webpack:///./src/app/auth/logout/logout.component.ts","webpack:///./src/app/auth/register/register.component.scss","webpack:///./src/app/auth/register/register.component.ts","webpack:///./src/app/auth/request-password/request-password.component.scss","webpack:///./src/app/auth/request-password/request-password.component.ts","webpack:///./src/app/auth/reset-passwordrd/reset-passwordrd.component.scss","webpack:///./src/app/auth/reset-passwordrd/reset-passwordrd.component.ts"],"names":[],"mappings":"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","file":"auth-auth-module-es5.js","sourcesContent":["module.exports = \"<p>auth works!</p>\\n\"","module.exports = \"<h1 id=\\\"title\\\" class=\\\"title\\\">Login</h1>\\n<p class=\\\"sub-title\\\">Hello! Log in with your email.</p>\\n\\n<nb-alert *ngIf=\\\"showMessages.error && errors?.length && !submitted\\\" outline=\\\"danger\\\" role=\\\"alert\\\">\\n  <p class=\\\"alert-title\\\"><b>Oh snap!</b></p>\\n  <ul class=\\\"alert-message-list\\\">\\n    <li *ngFor=\\\"let error of errors\\\" class=\\\"alert-message\\\">{{ error }}</li>\\n  </ul>\\n</nb-alert>\\n\\n<nb-alert *ngIf=\\\"showMessages.success && messages?.length && !submitted\\\" outline=\\\"success\\\" role=\\\"alert\\\">\\n  <p class=\\\"alert-title\\\"><b>Hooray!</b></p>\\n  <ul class=\\\"alert-message-list\\\">\\n    <li *ngFor=\\\"let message of messages\\\" class=\\\"alert-message\\\">{{ message }}</li>\\n  </ul>\\n</nb-alert>\\n\\n<form (ngSubmit)=\\\"login()\\\" #form=\\\"ngForm\\\" aria-labelledby=\\\"title\\\">\\n\\n  <div class=\\\"form-control-group\\\">\\n    <label class=\\\"label\\\" for=\\\"input-email\\\">Email address:</label>\\n    <input nbInput\\n           fullWidth\\n           [(ngModel)]=\\\"user.email\\\"\\n           #email=\\\"ngModel\\\"\\n           name=\\\"email\\\"\\n           id=\\\"input-email\\\"\\n           pattern=\\\".+@.+\\\\..+\\\"\\n           placeholder=\\\"Email address\\\"\\n           fieldSize=\\\"large\\\"\\n           autofocus\\n           [status]=\\\"email.dirty ? (email.invalid  ? 'danger' : 'success') : ''\\\"\\n           [required]=\\\"getConfigValue('forms.validation.email.required')\\\"\\n           [attr.aria-invalid]=\\\"email.invalid && email.touched ? true : null\\\">\\n    <ng-container *ngIf=\\\"email.invalid && email.touched\\\">\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"email.errors?.required\\\">\\n        Email is required!\\n      </p>\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"email.errors?.pattern\\\">\\n        Email should be the real one!\\n      </p>\\n    </ng-container>\\n  </div>\\n\\n  <div class=\\\"form-control-group\\\">\\n    <span class=\\\"label-with-link\\\">\\n      <label class=\\\"label\\\" for=\\\"input-password\\\">Mot de Pass:</label>\\n      <a class=\\\"forgot-password caption-2\\\" routerLink=\\\"../request-password\\\">Forgot Password?</a>\\n    </span>\\n    <input nbInput\\n           fullWidth\\n           [(ngModel)]=\\\"user.password\\\"\\n           #password=\\\"ngModel\\\"\\n           name=\\\"password\\\"\\n           type=\\\"password\\\"\\n           id=\\\"input-password\\\"\\n           placeholder=\\\"Password\\\"\\n           fieldSize=\\\"large\\\"\\n           [status]=\\\"password.dirty ? (password.invalid  ? 'danger' : 'success') : ''\\\"\\n           [required]=\\\"getConfigValue('forms.validation.password.required')\\\"\\n           [minlength]=\\\"getConfigValue('forms.validation.password.minLength')\\\"\\n           [maxlength]=\\\"getConfigValue('forms.validation.password.maxLength')\\\"\\n           [attr.aria-invalid]=\\\"password.invalid && password.touched ? true : null\\\">\\n    <ng-container *ngIf=\\\"password.invalid && password.touched \\\">\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"password.errors?.required\\\">\\n        Password is required!\\n      </p>\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"password.errors?.minlength || password.errors?.maxlength\\\">\\n        Password should contain\\n        from {{ getConfigValue('forms.validation.password.minLength') }}\\n        to {{ getConfigValue('forms.validation.password.maxLength') }}\\n        characters\\n      </p>\\n    </ng-container>\\n  </div>\\n\\n  <div class=\\\"form-control-group accept-group\\\">\\n    <nb-checkbox name=\\\"rememberMe\\\" [(ngModel)]=\\\"user.rememberMe\\\" *ngIf=\\\"rememberMe\\\">Remember me</nb-checkbox>\\n  </div>\\n\\n  <button nbButton\\n          fullWidth\\n          status=\\\"primary\\\"\\n          size=\\\"large\\\"\\n          [disabled]=\\\"submitted || !form.valid\\\"\\n          [class.btn-pulse]=\\\"submitted\\\">\\n    Log In\\n  </button>\\n</form>\\n\\n<section *ngIf=\\\"socialLinks && socialLinks.length > 0\\\" class=\\\"links\\\" aria-label=\\\"Social sign in\\\">\\n  or enter with:\\n  <div class=\\\"socials\\\">\\n    <ng-container *ngFor=\\\"let socialLink of socialLinks\\\">\\n      <a *ngIf=\\\"socialLink.link\\\"\\n         [routerLink]=\\\"socialLink.link\\\"\\n         [attr.target]=\\\"socialLink.target\\\"\\n         [attr.class]=\\\"socialLink.icon\\\"\\n         [class.with-icon]=\\\"socialLink.icon\\\">\\n        \\n        <ng-template #title>{{ socialLink.title }}</ng-template>\\n      </a>\\n      <a *ngIf=\\\"socialLink.url\\\"\\n         [attr.href]=\\\"socialLink.url\\\"\\n         [attr.target]=\\\"socialLink.target\\\"\\n         [attr.class]=\\\"socialLink.icon\\\"\\n         [class.with-icon]=\\\"socialLink.icon\\\">\\n        \\n        <ng-template #title>{{ socialLink.title }}</ng-template>\\n      </a>\\n    </ng-container>\\n  </div>\\n</section>\\n\\n<section class=\\\"another-action\\\" aria-label=\\\"Register\\\">\\n  Don't have an account? <a class=\\\"text-link\\\" routerLink=\\\"../register\\\">Register</a>\\n</section>\\n\"","module.exports = \"<div>Logging out, please wait...</div>\\n\"","module.exports = \"\\n\\n\\n\\n<h1 id=\\\"title\\\" class=\\\"title\\\">Register</h1>\\n\\n<nb-alert *ngIf=\\\"showMessages.error && errors?.length && !submitted\\\" outline=\\\"danger\\\" role=\\\"alert\\\">\\n  <p class=\\\"alert-title\\\"><b>Oh snap!</b></p>\\n  <ul class=\\\"alert-message-list\\\">\\n    <li *ngFor=\\\"let error of errors\\\" class=\\\"alert-message\\\">{{ error }}</li>\\n  </ul>\\n</nb-alert>\\n\\n<nb-alert *ngIf=\\\"showMessages.success && messages?.length && !submitted\\\" outline=\\\"success\\\" role=\\\"alert\\\">\\n  <p class=\\\"alert-title\\\"><b>Hooray!</b></p>\\n  <ul class=\\\"alert-message-list\\\">\\n    <li *ngFor=\\\"let message of messages\\\" class=\\\"alert-message\\\">{{ message }}</li>\\n  </ul>\\n</nb-alert>\\n\\n<form (ngSubmit)=\\\"register()\\\" #form=\\\"ngForm\\\" aria-labelledby=\\\"title\\\">\\n\\n  <div class=\\\"form-control-group\\\">\\n    <label class=\\\"label\\\" for=\\\"input-name\\\">Nom et Prenoms:</label>\\n    <input nbInput\\n           [(ngModel)]=\\\"user.fullName\\\"\\n           #fullName=\\\"ngModel\\\"\\n           id=\\\"input-name\\\"\\n           name=\\\"fullName\\\"\\n           placeholder=\\\"Full Name\\\"\\n           autofocus\\n           fullWidth\\n           fieldSize=\\\"large\\\"\\n           [status]=\\\"fullName.dirty ? (fullName.invalid  ? 'danger' : 'success') : ''\\\"\\n           [required]=\\\"getConfigValue('forms.validation.fullName.required')\\\"\\n           [minlength]=\\\"getConfigValue('forms.validation.fullName.minLength')\\\"\\n           [maxlength]=\\\"getConfigValue('forms.validation.fullName.maxLength')\\\"\\n           [attr.aria-invalid]=\\\"fullName.invalid && fullName.touched ? true : null\\\">\\n    <ng-container *ngIf=\\\"fullName.invalid && fullName.touched\\\">\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"fullName.errors?.required\\\">\\n        Full name is required!\\n      </p>\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"fullName.errors?.minlength || fullName.errors?.maxlength\\\">\\n        Full name should contains\\n        from {{getConfigValue('forms.validation.fullName.minLength')}}\\n        to {{getConfigValue('forms.validation.fullName.maxLength')}}\\n        characters\\n      </p>\\n    </ng-container>\\n  </div>\\n\\n  <div class=\\\"form-control-group\\\">\\n    <label class=\\\"label\\\" for=\\\"input-name\\\">Login:</label>\\n    <input nbInput\\n           [(ngModel)]=\\\"user.login\\\"\\n           #login=\\\"ngModel\\\"\\n           id=\\\"input-name\\\"\\n           name=\\\"login\\\"\\n           placeholder=\\\"Username\\\"\\n           autofocus\\n           fullWidth\\n           fieldSize=\\\"large\\\"\\n           [status]=\\\"login.dirty ? (login.invalid  ? 'danger' : 'success') : ''\\\"\\n           [required]=\\\"getConfigValue('forms.validation.login.required')\\\"\\n           [minlength]=\\\"getConfigValue('forms.validation.login.minLength')\\\"\\n           [maxlength]=\\\"getConfigValue('forms.validation.login.maxLength')\\\"\\n           [attr.aria-invalid]=\\\"login.invalid && login.touched ? true : null\\\">\\n    <ng-container *ngIf=\\\"login.invalid && login.touched\\\">\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"login.errors?.required\\\">\\n        Username is required!\\n      </p>\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"login.errors?.minlength || login.errors?.maxlength\\\">\\n        Username should contains\\n        from {{getConfigValue('forms.validation.login.minLength')}}\\n        to {{getConfigValue('forms.validation.login.maxLength')}}\\n        characters\\n      </p>\\n    </ng-container>\\n  </div>\\n\\n\\n  <div class=\\\"form-control-group\\\">\\n    <label class=\\\"label\\\" for=\\\"input-name\\\">Contact 1:</label>\\n    <input nbInput\\n           [(ngModel)]=\\\"user.telephone1\\\"\\n           #telephone1=\\\"ngModel\\\"\\n           id=\\\"input-name\\\"\\n           name=\\\"telephone1\\\"\\n           placeholder=\\\"Contact 1\\\"\\n           autofocus\\n           fullWidth\\n           fieldSize=\\\"large\\\"\\n           [status]=\\\"telephone1.dirty ? (login.invalid  ? 'danger' : 'success') : ''\\\"\\n           [required]=\\\"getConfigValue('forms.validation.telephone1.required')\\\"\\n           [minlength]=\\\"getConfigValue('forms.validation.telephone1.minLength')\\\"\\n           [maxlength]=\\\"getConfigValue('forms.validation.telephone1.maxLength')\\\"\\n           [attr.aria-invalid]=\\\"telephone1.invalid && telephone1.touched ? true : null\\\">\\n    <ng-container *ngIf=\\\"telephone1.invalid && telephone1.touched\\\">\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"telephone1.errors?.required\\\">\\n        Username is required!\\n      </p>\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"telephone1.errors?.minlength || telephone1.errors?.maxlength\\\">\\n        Username should contains\\n        from {{getConfigValue('forms.validation.telephone1.minLength')}}\\n        to {{getConfigValue('forms.validation.telephone1.maxLength')}}\\n        characters\\n      </p>\\n    </ng-container>\\n  </div>\\n\\n  <div class=\\\"form-control-group\\\">\\n    <label class=\\\"label\\\" for=\\\"input-name\\\">Contact 2:</label>\\n    <input nbInput\\n           [(ngModel)]=\\\"user.telephone2\\\"\\n           #telephone2=\\\"ngModel\\\"\\n           id=\\\"input-name\\\"\\n           name=\\\"telephone2\\\"\\n           placeholder=\\\"Contact 2\\\"\\n           autofocus\\n           fullWidth\\n           fieldSize=\\\"large\\\"\\n           [status]=\\\"telephone2.dirty ? (login.invalid  ? 'danger' : 'success') : ''\\\"\\n           [required]=\\\"getConfigValue('forms.validation.telephone2.required')\\\"\\n           [minlength]=\\\"getConfigValue('forms.validation.telephone2.minLength')\\\"\\n           [maxlength]=\\\"getConfigValue('forms.validation.telephone2.maxLength')\\\"\\n           [attr.aria-invalid]=\\\"telephone2.invalid && telephone2.touched ? true : null\\\">\\n    <ng-container *ngIf=\\\"telephone2.invalid && telephone2.touched\\\">\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"telephone2.errors?.required\\\">\\n        Username is required!\\n      </p>\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"telephone2.errors?.minlength || telephone2.errors?.maxlength\\\">\\n        Username should contains\\n        from {{getConfigValue('forms.validation.telephone2.minLength')}}\\n        to {{getConfigValue('forms.validation.telephone2.maxLength')}}\\n        characters\\n      </p>\\n    </ng-container>\\n  </div>\\n\\n\\n  <div class=\\\"form-control-group\\\">\\n    <label class=\\\"label\\\" for=\\\"input-name\\\">Quartier:</label>\\n    <input nbInput\\n           [(ngModel)]=\\\"user.quartier\\\"\\n           #quartier=\\\"ngModel\\\"\\n           id=\\\"input-name\\\"\\n           name=\\\"quartier\\\"\\n           placeholder=\\\"Quartier\\\"\\n           autofocus\\n           fullWidth\\n           fieldSize=\\\"large\\\"\\n           [status]=\\\"quartier.dirty ? (login.invalid  ? 'danger' : 'success') : ''\\\"\\n           [required]=\\\"getConfigValue('forms.validation.quartier.required')\\\"\\n           [minlength]=\\\"getConfigValue('forms.validation.quartier.minLength')\\\"\\n           [maxlength]=\\\"getConfigValue('forms.validation.quartier.maxLength')\\\"\\n           [attr.aria-invalid]=\\\"quartier.invalid && quartier.touched ? true : null\\\">\\n    <ng-container *ngIf=\\\"quartier.invalid && quartier.touched\\\">\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"quartier.errors?.required\\\">\\n        Username is required!\\n      </p>\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"quartier.errors?.minlength || quartier.errors?.maxlength\\\">\\n        Username should contains\\n        from {{getConfigValue('forms.validation.quartier.minLength')}}\\n        to {{getConfigValue('forms.validation.quartier.maxLength')}}\\n        characters\\n      </p>\\n    </ng-container>\\n  </div>\\n\\n\\n  <div class=\\\"form-control-group\\\">\\n    <label class=\\\"label\\\" for=\\\"input-email\\\">Email :</label>\\n    <input nbInput\\n           [(ngModel)]=\\\"user.email\\\"\\n           #email=\\\"ngModel\\\"\\n           id=\\\"input-email\\\"\\n           name=\\\"email\\\"\\n           pattern=\\\".+@.+..+\\\"\\n           placeholder=\\\"Adresse Email\\\"\\n           fullWidth\\n           fieldSize=\\\"large\\\"\\n           [status]=\\\"email.dirty ? (email.invalid  ? 'danger' : 'success') : ''\\\"\\n           [required]=\\\"getConfigValue('forms.validation.email.required')\\\"\\n           [attr.aria-invalid]=\\\"email.invalid && email.touched ? true : null\\\">\\n    <ng-container *ngIf=\\\"email.invalid && email.touched\\\">\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"email.errors?.required\\\">\\n        Email is required!\\n      </p>\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"email.errors?.pattern\\\">\\n        Email should be the real one!\\n      </p>\\n    </ng-container>\\n  </div>\\n\\n  <div class=\\\"form-control-group\\\">\\n    <label class=\\\"label\\\" for=\\\"input-password\\\">Mot de Pass:</label>\\n    <input nbInput\\n           [(ngModel)]=\\\"user.password\\\"\\n           #password=\\\"ngModel\\\"\\n           type=\\\"password\\\"\\n           id=\\\"input-password\\\"\\n           name=\\\"password\\\"\\n           placeholder=\\\"Password\\\"\\n           fullWidth\\n           fieldSize=\\\"large\\\"\\n           [status]=\\\"password.dirty ? (password.invalid  ? 'danger' : 'success') : ''\\\"\\n           [required]=\\\"getConfigValue('forms.validation.password.required')\\\"\\n           [minlength]=\\\"getConfigValue('forms.validation.password.minLength')\\\"\\n           [maxlength]=\\\"getConfigValue('forms.validation.password.maxLength')\\\"\\n           [attr.aria-invalid]=\\\"password.invalid && password.touched ? true : null\\\">\\n    <ng-container *ngIf=\\\"password.invalid && password.touched\\\">\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"password.errors?.required\\\">\\n        Password is required!\\n      </p>\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"password.errors?.minlength || password.errors?.maxlength\\\">\\n        Password should contain\\n        from {{ getConfigValue('forms.validation.password.minLength') }}\\n        to {{ getConfigValue('forms.validation.password.maxLength') }}\\n        characters\\n      </p>\\n    </ng-container>\\n  </div>\\n\\n  <div class=\\\"form-control-group\\\">\\n    <label class=\\\"label\\\" for=\\\"input-re-password\\\">Repéter Mot de Pass:</label>\\n    <input nbInput\\n           [(ngModel)]=\\\"user.confirmPassword\\\"\\n           #rePass=\\\"ngModel\\\"\\n           type=\\\"password\\\"\\n           id=\\\"input-re-password\\\"\\n           name=\\\"rePass\\\"\\n           placeholder=\\\"Confirm Password\\\"\\n           fullWidth\\n           fieldSize=\\\"large\\\"\\n           [status]=\\\"rePass.dirty ? (rePass.invalid || password.value != rePass.value  ? 'danger' : 'success') : ''\\\"\\n           [required]=\\\"getConfigValue('forms.validation.password.required')\\\"\\n           [attr.aria-invalid]=\\\"rePass.invalid && rePass.touched ? true : null\\\">\\n    <ng-container *ngIf=\\\"rePass.invalid && rePass.touched\\\">\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"rePass.errors?.required\\\">\\n        Password confirmation is required!\\n      </p>\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"password.value != rePass.value && !rePass.errors?.required\\\">\\n        Password does not match the confirm password.\\n      </p>\\n    </ng-container>\\n  </div>\\n\\n  <div class=\\\"form-control-group accept-group\\\" *ngIf=\\\"getConfigValue('forms.register.terms')\\\">\\n    <nb-checkbox name=\\\"terms\\\" [(ngModel)]=\\\"user.terms\\\" [required]=\\\"getConfigValue('forms.register.terms')\\\">\\n      Agree to <a href=\\\"#\\\" target=\\\"_blank\\\"><strong>Terms & Conditions</strong></a>\\n    </nb-checkbox>\\n  </div>\\n\\n  <button nbButton\\n          fullWidth\\n          status=\\\"primary\\\"\\n          size=\\\"large\\\"\\n          [disabled]=\\\"submitted || !form.valid\\\"\\n          [class.btn-pulse]=\\\"submitted\\\">\\n    Register\\n  </button>\\n</form>\\n\\n<section *ngIf=\\\"socialLinks && socialLinks.length > 0\\\" class=\\\"links\\\" aria-label=\\\"Social sign in\\\">\\n  or enter with:\\n  <div class=\\\"socials\\\">\\n    <ng-container *ngFor=\\\"let socialLink of socialLinks\\\">\\n      <a *ngIf=\\\"socialLink.link\\\"\\n         [routerLink]=\\\"socialLink.link\\\"\\n         [attr.target]=\\\"socialLink.target\\\"\\n         [attr.class]=\\\"socialLink.icon\\\"\\n         [class.with-icon]=\\\"socialLink.icon\\\">\\n       <!--<nb-icon *ngIf=\\\"socialLink.icon; else title\\\" [icon]=\\\"socialLink.icon\\\"></nb-icon>--> \\n        <ng-template #title>{{ socialLink.title }}</ng-template>\\n      </a>\\n      <a *ngIf=\\\"socialLink.url\\\"\\n         [attr.href]=\\\"socialLink.url\\\"\\n         [attr.target]=\\\"socialLink.target\\\"\\n         [attr.class]=\\\"socialLink.icon\\\"\\n         [class.with-icon]=\\\"socialLink.icon\\\">\\n     <!-- <nb-icon *ngIf=\\\"socialLink.icon; else title\\\" [icon]=\\\"socialLink.icon\\\"></nb-icon> --> \\n        <ng-template #title>{{ socialLink.title }}</ng-template>\\n      </a>\\n    </ng-container>\\n  </div>\\n</section>\\n\\n<section class=\\\"another-action\\\" aria-label=\\\"Sign in\\\">\\n  Already have an account? <a class=\\\"text-link\\\" routerLink=\\\"../login\\\">Log in</a>\\n</section>\\n\"","module.exports = \"<h1 id=\\\"title\\\" class=\\\"title\\\">Forgot Password</h1>\\n<p class=\\\"sub-title\\\">Enter your email address and we’ll send a link to reset your password</p>\\n\\n<nb-alert *ngIf=\\\"showMessages.error && errors?.length && !submitted\\\" outline=\\\"danger\\\" role=\\\"alert\\\">\\n  <p class=\\\"alert-title\\\"><b>Oh snap!</b></p>\\n  <ul class=\\\"alert-message-list\\\">\\n    <li *ngFor=\\\"let error of errors\\\" class=\\\"alert-message\\\">{{ error }}</li>\\n  </ul>\\n</nb-alert>\\n\\n<nb-alert *ngIf=\\\"showMessages.success && messages?.length && !submitted\\\" outline=\\\"success\\\" role=\\\"alert\\\">\\n  <p class=\\\"alert-title\\\"><b>Hooray!</b></p>\\n  <ul class=\\\"alert-message-list\\\">\\n    <li *ngFor=\\\"let message of messages\\\" class=\\\"alert-message\\\">{{ message }}</li>\\n  </ul>\\n</nb-alert>\\n\\n<form (ngSubmit)=\\\"requestPass()\\\" #requestPassForm=\\\"ngForm\\\" aria-labelledby=\\\"title\\\">\\n\\n  <div class=\\\"form-control-group\\\">\\n    <label class=\\\"label\\\" for=\\\"input-email\\\">Enter your email address:</label>\\n    <input nbInput\\n           [(ngModel)]=\\\"user.email\\\"\\n           #email=\\\"ngModel\\\"\\n           id=\\\"input-email\\\"\\n           name=\\\"email\\\"\\n           pattern=\\\".+@.+\\\\..+\\\"\\n           placeholder=\\\"Email address\\\"\\n           autofocus\\n           fullWidth\\n           fieldSize=\\\"large\\\"\\n           [status]=\\\"email.dirty ? (email.invalid  ? 'danger' : 'success') : ''\\\"\\n           [required]=\\\"getConfigValue('forms.validation.email.required')\\\"\\n           [attr.aria-invalid]=\\\"email.invalid && email.touched ? true : null\\\">\\n    <ng-container *ngIf=\\\"email.invalid && email.touched\\\">\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"email.errors?.required\\\">\\n        Email is required!\\n      </p>\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"email.errors?.pattern\\\">\\n        Email should be the real one!\\n      </p>\\n    </ng-container>\\n  </div>\\n\\n  <button nbButton\\n          fullWidth\\n          status=\\\"primary\\\"\\n          size=\\\"large\\\"\\n          [disabled]=\\\"submitted || !requestPassForm.valid\\\"\\n          [class.btn-pulse]=\\\"submitted\\\">\\n    Request password\\n  </button>\\n</form>\\n\\n<section class=\\\"sign-in-or-up\\\" aria-label=\\\"Sign in or sign up\\\">\\n  <p><a class=\\\"text-link\\\" routerLink=\\\"../login\\\">Back to Log In</a></p>\\n  <p><a routerLink=\\\"../register\\\" class=\\\"text-link\\\">Register</a></p>\\n</section>\\n\"","module.exports = \"<h1 id=\\\"title\\\" class=\\\"title\\\">Change password</h1>\\n<p class=\\\"sub-title\\\">Please set a new password</p>\\n\\n<nb-alert *ngIf=\\\"showMessages.error && errors?.length && !submitted\\\" outline=\\\"danger\\\" role=\\\"alert\\\">\\n  <p class=\\\"alert-title\\\"><b>Oh snap!</b></p>\\n  <ul class=\\\"alert-message-list\\\">\\n    <li *ngFor=\\\"let error of errors\\\" class=\\\"alert-message\\\">{{ error }}</li>\\n  </ul>\\n</nb-alert>\\n\\n<nb-alert *ngIf=\\\"showMessages.success && messages?.length && !submitted\\\" outline=\\\"success\\\" role=\\\"alert\\\">\\n  <p class=\\\"alert-title\\\"><b>Hooray!</b></p>\\n  <ul class=\\\"alert-message-list\\\">\\n    <li *ngFor=\\\"let message of messages\\\" class=\\\"alert-message\\\">{{ message }}</li>\\n  </ul>\\n</nb-alert>\\n\\n<form (ngSubmit)=\\\"resetPass()\\\" #resetPassForm=\\\"ngForm\\\" aria-labelledby=\\\"title\\\">\\n\\n  <div class=\\\"form-control-group\\\">\\n    <label class=\\\"label\\\" for=\\\"input-password\\\">New Password:</label>\\n    <input nbInput\\n           [(ngModel)]=\\\"user.password\\\"\\n           #password=\\\"ngModel\\\"\\n           type=\\\"password\\\"\\n           id=\\\"input-password\\\"\\n           name=\\\"password\\\"\\n           class=\\\"first\\\"\\n           placeholder=\\\"New Password\\\"\\n           autofocus\\n           fullWidth\\n           fieldSize=\\\"large\\\"\\n           [status]=\\\"password.dirty ? (password.invalid  ? 'danger' : 'success') : ''\\\"\\n           [required]=\\\"getConfigValue('forms.validation.password.required')\\\"\\n           [minlength]=\\\"getConfigValue('forms.validation.password.minLength')\\\"\\n           [maxlength]=\\\"getConfigValue('forms.validation.password.maxLength')\\\"\\n           [attr.aria-invalid]=\\\"password.invalid && password.touched ? true : null\\\">\\n    <ng-container *ngIf=\\\"password.invalid && password.touched\\\">\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"password.errors?.required\\\">\\n        Password is required!\\n      </p>\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"password.errors?.minlength || password.errors?.maxlength\\\">\\n        Password should contains\\n        from {{getConfigValue('forms.validation.password.minLength')}}\\n        to {{getConfigValue('forms.validation.password.maxLength')}}\\n        characters\\n      </p>\\n    </ng-container>\\n  </div>\\n\\n  <div class=\\\"form-group\\\">\\n    <label class=\\\"label\\\" for=\\\"input-re-password\\\">Confirm Password:</label>\\n    <input nbInput\\n           [(ngModel)]=\\\"user.confirmPassword\\\"\\n           #rePass=\\\"ngModel\\\"\\n           id=\\\"input-re-password\\\"\\n           name=\\\"rePass\\\"\\n           type=\\\"password\\\"\\n           class=\\\"last\\\"\\n           placeholder=\\\"Confirm Password\\\"\\n           fullWidth\\n           fieldSize=\\\"large\\\"\\n           [status]=\\\"rePass.touched\\n               ? (rePass.invalid || password.value != rePass.value ? 'danger' : 'success')\\n               : ''\\\"\\n           [required]=\\\"getConfigValue('forms.validation.password.required')\\\"\\n           [attr.aria-invalid]=\\\"rePass.invalid && rePass.touched ? true : null\\\">\\n    <ng-container *ngIf=\\\"rePass.touched\\\">\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"rePass.invalid && rePass.errors?.required\\\">\\n        Password confirmation is required!\\n      </p>\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"password.value != rePass.value && !rePass.errors?.required\\\">\\n        Password does not match the confirm password.\\n      </p>\\n    </ng-container>\\n  </div>\\n\\n  <button nbButton\\n          status=\\\"primary\\\"\\n          fullWidth\\n          size=\\\"large\\\"\\n          [disabled]=\\\"submitted || !resetPassForm.valid\\\"\\n          [class.btn-pulse]=\\\"submitted\\\">\\n    Change password\\n  </button>\\n</form>\\n\\n<section class=\\\"sign-in-or-up\\\" aria-label=\\\"Sign in or sign up\\\">\\n  <p><a class=\\\"text-link\\\" routerLink=\\\"../login\\\">Back to Log In</a></p>\\n  <p><a class=\\\"text-link\\\" routerLink=\\\"../register\\\">Register</a></p>\\n</section>\\n\"","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { NbAuthComponent } from '@nebular/auth';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { LogoutComponent } from './logout/logout.component';\r\nimport { RequestPasswordComponent } from './request-password/request-password.component';\r\nimport { ResetPasswordrdComponent } from './reset-passwordrd/reset-passwordrd.component';\r\n\r\nexport const route: Routes = [\r\n    {\r\n        path: '',\r\n        component: NbAuthComponent,\r\n        children: [\r\n          {\r\n            path: 'login',\r\n            component: LoginComponent, // <---\r\n          },\r\n          {\r\n            path: 'register',\r\n            component: RegisterComponent, // <---\r\n          },\r\n          {\r\n            path: 'logout',\r\n            component: LogoutComponent, // <---\r\n          },\r\n          {\r\n            path: 'request',\r\n            component: RequestPasswordComponent, // <---\r\n          },\r\n          {\r\n            path: 'reset',\r\n            component: ResetPasswordrdComponent, // <---\r\n          },\r\n        ],\r\n      },\r\n    ];\r\n\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(route)],\r\n  exports: [RouterModule],\r\n})\r\nexport class NgxAuthRoutingModule {\r\n}","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvYXV0aC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.scss']\n})\nexport class AuthComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { NgxAuthRoutingModule } from './auth-routing.module';\r\nimport { NbAuthModule } from '@nebular/auth';\r\nimport { \r\n  NbAlertModule,\r\n  NbButtonModule,\r\n  NbCheckboxModule,\r\n  NbInputModule\r\n} from '@nebular/theme';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { LogoutComponent } from './logout/logout.component';\r\nimport { RequestPasswordComponent } from './request-password/request-password.component';\r\nimport { ResetPasswordrdComponent } from './reset-passwordrd/reset-passwordrd.component';\r\nimport { AuthComponent } from './auth.component';\r\nimport { EmployeeListComponent } from '../employee/employee-list/employee-list.component';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    RouterModule,\r\n    NbAlertModule,\r\n    NbInputModule,\r\n    NbButtonModule,\r\n    NbCheckboxModule,\r\n    NgxAuthRoutingModule,\r\n\r\n    NbAuthModule,\r\n  ],\r\n  declarations: [\r\n    // ... here goes our new components\r\n  LoginComponent,\r\n    RegisterComponent,\r\n    LogoutComponent,\r\n    RequestPasswordComponent,\r\n    ResetPasswordrdComponent,\r\n    AuthComponent,\r\n    EmployeeListComponent],\r\n   \r\n})\r\nexport class NgxAuthModule {\r\n}","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvbG9naW4vbG9naW4uY29tcG9uZW50LnNjc3MifQ== */\"","import { Component} from '@angular/core';\nimport { NbLoginComponent } from '@nebular/auth';\n\n@Component({\n  selector: 'ngx-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent extends NbLoginComponent {\n\n}\n\n \n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvbG9nb3V0L2xvZ291dC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-logout',\n  templateUrl: './logout.component.html',\n  styleUrls: ['./logout.component.scss']\n})\nexport class LogoutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"/**\\r\\n * @license\\r\\n * Copyright Akveo. All Rights Reserved.\\r\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\r\\n */\\n:host .title {\\n  margin-bottom: 2rem; }\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXV0aC9yZWdpc3Rlci9FOlxcUHJvamVjdHNcXEFuZ3VsYXIgUHJvamVjdHNcXG5neC1hZG1pbi1tYXN0ZXIvc3JjXFxhcHBcXGF1dGhcXHJlZ2lzdGVyXFxyZWdpc3Rlci5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvYXV0aC9yZWdpc3Rlci9yZWdpc3Rlci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztFQ0lFO0FEQ0Q7RUFFRyxtQkFBbUIsRUFBQSIsImZpbGUiOiJzcmMvYXBwL2F1dGgvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi9cclxuIDpob3N0IHtcclxuICAudGl0bGUge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMnJlbTtcclxuICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICovXG46aG9zdCAudGl0bGUge1xuICBtYXJnaW4tYm90dG9tOiAycmVtOyB9XG4iXX0= */\"","import { Component, OnInit } from '@angular/core';\nimport { NbLoginComponent } from '@nebular/auth';\n\n@Component({\n  selector: 'ngx-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent extends NbLoginComponent {\n\n}\n","module.exports = \"/**\\r\\n * @license\\r\\n * Copyright Akveo. All Rights Reserved.\\r\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\r\\n */\\n:host .form-group:last-of-type {\\n  margin-bottom: 3rem; }\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXV0aC9yZXF1ZXN0LXBhc3N3b3JkL0U6XFxQcm9qZWN0c1xcQW5ndWxhciBQcm9qZWN0c1xcbmd4LWFkbWluLW1hc3Rlci9zcmNcXGFwcFxcYXV0aFxccmVxdWVzdC1wYXNzd29yZFxccmVxdWVzdC1wYXNzd29yZC5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvYXV0aC9yZXF1ZXN0LXBhc3N3b3JkL3JlcXVlc3QtcGFzc3dvcmQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7RUNJRTtBRENEO0VBRUssbUJBQW1CLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9hdXRoL3JlcXVlc3QtcGFzc3dvcmQvcmVxdWVzdC1wYXNzd29yZC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqL1xyXG4gOmhvc3Qge1xyXG4gICAgLmZvcm0tZ3JvdXA6bGFzdC1vZi10eXBlIHtcclxuICAgICAgbWFyZ2luLWJvdHRvbTogM3JlbTtcclxuICAgIH1cclxuICB9XHJcbiAgIiwiLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICovXG46aG9zdCAuZm9ybS1ncm91cDpsYXN0LW9mLXR5cGUge1xuICBtYXJnaW4tYm90dG9tOiAzcmVtOyB9XG4iXX0= */\"","import { Component, OnInit } from '@angular/core';\nimport { NbLoginComponent } from '@nebular/auth';\n\n@Component({\n  selector: 'ngx-request-password',\n  templateUrl: './request-password.component.html',\n  styleUrls: ['./request-password.component.scss']\n})\nexport class RequestPasswordComponent extends NbLoginComponent{\n\n  \n\n}\n","module.exports = \"/**\\r\\n * @license\\r\\n * Copyright Akveo. All Rights Reserved.\\r\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\r\\n */\\n:host .form-group:last-of-type {\\n  margin-bottom: 3rem; }\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXV0aC9yZXNldC1wYXNzd29yZHJkL0U6XFxQcm9qZWN0c1xcQW5ndWxhciBQcm9qZWN0c1xcbmd4LWFkbWluLW1hc3Rlci9zcmNcXGFwcFxcYXV0aFxccmVzZXQtcGFzc3dvcmRyZFxccmVzZXQtcGFzc3dvcmRyZC5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvYXV0aC9yZXNldC1wYXNzd29yZHJkL3Jlc2V0LXBhc3N3b3JkcmQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7RUNJRTtBRENEO0VBRUssbUJBQW1CLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9hdXRoL3Jlc2V0LXBhc3N3b3JkcmQvcmVzZXQtcGFzc3dvcmRyZC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqL1xyXG4gOmhvc3Qge1xyXG4gICAgLmZvcm0tZ3JvdXA6bGFzdC1vZi10eXBlIHtcclxuICAgICAgbWFyZ2luLWJvdHRvbTogM3JlbTtcclxuICAgIH1cclxuICB9XHJcbiAgIiwiLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICovXG46aG9zdCAuZm9ybS1ncm91cDpsYXN0LW9mLXR5cGUge1xuICBtYXJnaW4tYm90dG9tOiAzcmVtOyB9XG4iXX0= */\"","import { Component, OnInit } from '@angular/core';\nimport { NbLoginComponent } from '@nebular/auth';\n\n@Component({\n  selector: 'ngx-reset-passwordrd',\n  templateUrl: './reset-passwordrd.component.html',\n  styleUrls: ['./reset-passwordrd.component.scss']\n})\nexport class ResetPasswordrdComponent extends NbLoginComponent {\n\n}\n"],"sourceRoot":""}